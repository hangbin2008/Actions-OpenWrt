name: build openwrt fo N1 Version

on:
  #repository_dispatch:
  #  types: [mini]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  SUB_VERSION: mini
  CONFIG_FILE: n2n.config
  DIY_SH: diy3.sh
  TZ: Asia/Shanghai
  RELEASE: true

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Check CPU
      id: checkcpu
      run: |      
        cpu_model=`cat /proc/cpuinfo  |grep 'model name' |gawk -F : '{print $2}' | uniq -c  | sed 's/^ \+[0-9]\+ //g'`
        echo "cpu model: $cpu_model "
        e5CPU="E5"
        if [[ $cpu_model =~ $e5CPU ]]
        then
            echo "::set-output name=status::cancel"
        fi
        
    - name: Cancelling
      if: steps.checkcpu.outputs.status == 'cancel'
      uses: andymckay/cancel-action@0.2
      
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt update -y
        sudo -E apt full-upgrade -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        df -h
        
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
        sudo mkdir -p /upload
        sudo chown $USER:$GROUPS /upload
        
        cd /upload
        echo "UPLOAD=$PWD" >> $GITHUB_ENV
        
        echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")"  >> $GITHUB_ENV
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt 
        cd openwrt
        sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
        sed -i '$a src-git small https://github.com/kenzok8/small' feeds.conf.default
       # sed -i '$a src-git kenzo https://github.com/kenzok8/jell' feeds.conf.default
        
    - name: Update & Install Feeds
      run: |
        cd openwrt
        export GIT_SSL_NO_VERIFY=1
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    #- name: Êõ¥Êç¢ÂÜÖÊ†∏ÁºñËØë
    #  run: cd openwrt && sed -i 's/KERNEL_PATCHVER:=5.4/KERNEL_PATCHVER:=5.10/' ./target/linux/ramips/Makefile
      
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files openwrt/files
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH        
     
    - name: Compile Firmware
      id: compile
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo -e "$(nproc) thread compile"
        
        make -j$(nproc) || make -j1 || make -j1 V=s
        
        cp .config ${UPLOAD}/build.config
        cd bin/targets/*/*
        cp openwrt-armvirt-64-default-rootfs.tar.gz  ${UPLOAD}/openwrt-armvirt-64-default-rootfs-${SUB_VERSION}.tar.gz
        count=` find -name '*.xz' | wc -l `
        if [  $count -gt 0 ] ; then
            cp -r *.xz ${UPLOAD}/
        fi
        echo "::set-output name=status::success"    
        
    - name: Create Firmware Release
      if: steps.compile.outputs.status == 'success' && env.RELEASE == 'true' && !cancelled()
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} üöÄ / N1-Openwrt | ÁºñËØë
        allowUpdates: true
        tag: ${{ env.tag_name }}
        commit: master
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts:  ${{ env.UPLOAD }}/*
        

    - name: Package Armvirt as OpenWrt
      if: steps.compile.outputs.status == 'success' && !cancelled()
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        PACKAGE_SOC: vplus_beikeyun_l1pro_s905x3_s905d
        KERNEL_VERSION_NAME: 5.15.25_5.4.180

    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@v1
      if: env.PACKAGED_STATUS == 'success' && !cancelled()
      with:
        tag: openwrt_armvirt_${{ env.PACKAGED_OUTPUTDATE }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ÈªòËÆ§IPÔºö192.168.31.2 ÈªòËÆ§ÂØÜÁ†ÅÔºö password
          ÂÖ®Êñ∞Âà∑ÂÖ•emmcÊñπÊ≥ïÔºö
             1. Âõ∫‰ª∂Âà∑ÂÖ•UÁõò„ÄÇ
             2. cd root
             3. ./install-to-emmc.sh
             4. ÊãîÊéâUÁõòÔºåÊñ≠ÁîµÈáçÂêØ„ÄÇ
             
          Âú®Á∫øÂçáÁ∫ßÊñπÊ≥ïÔºö
             1. ‰∏ä‰º† img Âà∞/mnt/mmcblk2p4
             2. cd /mnt/mmcblk2p4
             3. ÂçáÁ∫ßËÑöÊú¨‰∏ãËΩΩ update-amlogic-openwrt.sh
             4. chmod +x update-amlogic-openwrt.sh
             5. gzip -d  *.img.gz
             6. ./update-amlogic-openwrt.sh xxxx.img
          artifacts: ${{ env.UPLOAD }}/*
          
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
